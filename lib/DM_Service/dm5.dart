import 'package:flutter/material.dart';

class Am7 extends StatefulWidget { const Am7({super.key});

@override State<Am7> createState() => _Am7State(); }

class _Am7State extends State<Am7> { bool showMethods = false;

final List<Map<String, String>> methods = [ { 'no': '01', 'icon': 'engineering', 'title': 'Identify and Discover', 'description': 'Define goals, gather requirements, and outline the roadmap with precision.' }, { 'no': '02', 'icon': 'architecture', 'title': 'Make a Purposeful Plan', 'description': 'Craft modern, scalable architectures with intuitive designs for seamless UX.' }, { 'no': '03', 'icon': 'integration_instructions', 'title': 'Build to Engage', 'description': 'Implement robust code and integrate seamlessly with third-party systems.' }, { 'no': '04', 'icon': 'rule_folder', 'title': 'Launch, Learn, and Adjust', 'description': 'Ensure functionality, performance, and security through thorough testing.' }, { 'no': '05', 'icon': 'rocket_launch', 'title': 'Evaluate and Adjust', 'description': 'Deploy solutions with confidence using optimized and scalable methods.' }, { 'no': '06', 'icon': 'support_agent', 'title': 'Ongoing Support', 'description': 'Deliver continuous updates and support to ensure smooth operations.' }, ];

@override Widget build(BuildContext context) { final screenWidth = MediaQuery.of(context).size.width; return Container( color: Colors.transparent, padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24), child: Column( crossAxisAlignment: CrossAxisAlignment.center, children: [ Center( child: ElevatedButton( onPressed: () { setState(() => showMethods = !showMethods); }, style: ElevatedButton.styleFrom( shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(30), ), backgroundColor: Colors.indigo, padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 14), ), child: const Text( 'Our Digital Marketing Process', style: TextStyle(fontSize: 16, color: Colors.white), ), ), ), const SizedBox(height: 24), if (showMethods) ...methods.map( (item) => Container( margin: const EdgeInsets.only(bottom: 16), padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20), decoration: BoxDecoration( color: Colors.white, borderRadius: BorderRadius.circular(20), boxShadow: [ BoxShadow( color: Colors.black12, blurRadius: 8, offset: const Offset(0, 4), ), ], ), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( item['no']!, style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 20, color: Colors.indigo), ), const SizedBox(width: 12), Icon( _getIcon(item['icon']!), size: 28, color: Colors.indigoAccent, ), const SizedBox(width: 12), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( item['title']!, style: const TextStyle( fontSize: 16, fontWeight: FontWeight.bold), ), const SizedBox(height: 4), Text( item['description']!, style: const TextStyle(fontSize: 14), ), ], ), ) ], ), ), ), ], ), ); }

IconData _getIcon(String iconName) { switch (iconName) { case 'engineering': return Icons.engineering; case 'architecture': return Icons.architecture; case 'integration_instructions': return Icons.integration_instructions; case 'rule_folder': return Icons.rule_folder; case 'rocket_launch': return Icons.rocket_launch; case 'support_agent': return Icons.support_agent; default: return Icons.device_hub; } } }